// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetTitlesResponse defines model for GetTitlesResponse.
type GetTitlesResponse struct {
	Titles []WikiPageObject `json:"titles"`
}

// RandomArticlesResponse defines model for RandomArticlesResponse.
type RandomArticlesResponse struct {
	Articles []string `json:"articles"`
}

// WikiPageObject defines model for WikiPageObject.
type WikiPageObject struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Key         string  `json:"key"`
	Title       string  `json:"title"`
}

// GetArticlesIsTitleInArticleParams defines parameters for GetArticlesIsTitleInArticle.
type GetArticlesIsTitleInArticleParams struct {
	// SourceTitle where to check if title is in
	SourceTitle string `form:"sourceTitle" json:"sourceTitle"`

	// TargetTitle to check
	TargetTitle string `form:"targetTitle" json:"targetTitle"`
}

// GetArticlesRandomParams defines parameters for GetArticlesRandom.
type GetArticlesRandomParams struct {
	// Limit number of random articles to return
	Limit *uint `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetArticlesTitlesParams defines parameters for GetArticlesTitles.
type GetArticlesTitlesParams struct {
	// Input where to get titles from
	Input string `form:"input" json:"input"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetArticlesIsTitleInArticle request
	GetArticlesIsTitleInArticle(ctx context.Context, params *GetArticlesIsTitleInArticleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArticlesRandom request
	GetArticlesRandom(ctx context.Context, params *GetArticlesRandomParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArticlesTitles request
	GetArticlesTitles(ctx context.Context, params *GetArticlesTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetArticlesIsTitleInArticle(ctx context.Context, params *GetArticlesIsTitleInArticleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticlesIsTitleInArticleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticlesRandom(ctx context.Context, params *GetArticlesRandomParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticlesRandomRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticlesTitles(ctx context.Context, params *GetArticlesTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticlesTitlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetArticlesIsTitleInArticleRequest generates requests for GetArticlesIsTitleInArticle
func NewGetArticlesIsTitleInArticleRequest(server string, params *GetArticlesIsTitleInArticleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/IsTitleInArticle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceTitle", runtime.ParamLocationQuery, params.SourceTitle); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetTitle", runtime.ParamLocationQuery, params.TargetTitle); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArticlesRandomRequest generates requests for GetArticlesRandom
func NewGetArticlesRandomRequest(server string, params *GetArticlesRandomParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArticlesTitlesRequest generates requests for GetArticlesTitles
func NewGetArticlesTitlesRequest(server string, params *GetArticlesTitlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/articles/titles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input", runtime.ParamLocationQuery, params.Input); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetArticlesIsTitleInArticleWithResponse request
	GetArticlesIsTitleInArticleWithResponse(ctx context.Context, params *GetArticlesIsTitleInArticleParams, reqEditors ...RequestEditorFn) (*GetArticlesIsTitleInArticleResponse, error)

	// GetArticlesRandomWithResponse request
	GetArticlesRandomWithResponse(ctx context.Context, params *GetArticlesRandomParams, reqEditors ...RequestEditorFn) (*GetArticlesRandomResponse, error)

	// GetArticlesTitlesWithResponse request
	GetArticlesTitlesWithResponse(ctx context.Context, params *GetArticlesTitlesParams, reqEditors ...RequestEditorFn) (*GetArticlesTitlesResponse, error)
}

type GetArticlesIsTitleInArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetArticlesIsTitleInArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticlesIsTitleInArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticlesRandomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RandomArticlesResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetArticlesRandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticlesRandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticlesTitlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GetTitlesResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetArticlesTitlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticlesTitlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetArticlesIsTitleInArticleWithResponse request returning *GetArticlesIsTitleInArticleResponse
func (c *ClientWithResponses) GetArticlesIsTitleInArticleWithResponse(ctx context.Context, params *GetArticlesIsTitleInArticleParams, reqEditors ...RequestEditorFn) (*GetArticlesIsTitleInArticleResponse, error) {
	rsp, err := c.GetArticlesIsTitleInArticle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticlesIsTitleInArticleResponse(rsp)
}

// GetArticlesRandomWithResponse request returning *GetArticlesRandomResponse
func (c *ClientWithResponses) GetArticlesRandomWithResponse(ctx context.Context, params *GetArticlesRandomParams, reqEditors ...RequestEditorFn) (*GetArticlesRandomResponse, error) {
	rsp, err := c.GetArticlesRandom(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticlesRandomResponse(rsp)
}

// GetArticlesTitlesWithResponse request returning *GetArticlesTitlesResponse
func (c *ClientWithResponses) GetArticlesTitlesWithResponse(ctx context.Context, params *GetArticlesTitlesParams, reqEditors ...RequestEditorFn) (*GetArticlesTitlesResponse, error) {
	rsp, err := c.GetArticlesTitles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticlesTitlesResponse(rsp)
}

// ParseGetArticlesIsTitleInArticleResponse parses an HTTP response from a GetArticlesIsTitleInArticleWithResponse call
func ParseGetArticlesIsTitleInArticleResponse(rsp *http.Response) (*GetArticlesIsTitleInArticleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticlesIsTitleInArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetArticlesRandomResponse parses an HTTP response from a GetArticlesRandomWithResponse call
func ParseGetArticlesRandomResponse(rsp *http.Response) (*GetArticlesRandomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticlesRandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RandomArticlesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetArticlesTitlesResponse parses an HTTP response from a GetArticlesTitlesWithResponse call
func ParseGetArticlesTitlesResponse(rsp *http.Response) (*GetArticlesTitlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticlesTitlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GetTitlesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /articles/IsTitleInArticle)
	GetArticlesIsTitleInArticle(ctx echo.Context, params GetArticlesIsTitleInArticleParams) error

	// (GET /articles/random)
	GetArticlesRandom(ctx echo.Context, params GetArticlesRandomParams) error

	// (GET /articles/titles)
	GetArticlesTitles(ctx echo.Context, params GetArticlesTitlesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArticlesIsTitleInArticle converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticlesIsTitleInArticle(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesIsTitleInArticleParams
	// ------------- Required query parameter "sourceTitle" -------------

	err = runtime.BindQueryParameter("form", true, true, "sourceTitle", ctx.QueryParams(), &params.SourceTitle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourceTitle: %s", err))
	}

	// ------------- Required query parameter "targetTitle" -------------

	err = runtime.BindQueryParameter("form", true, true, "targetTitle", ctx.QueryParams(), &params.TargetTitle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetTitle: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetArticlesIsTitleInArticle(ctx, params)
	return err
}

// GetArticlesRandom converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticlesRandom(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesRandomParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetArticlesRandom(ctx, params)
	return err
}

// GetArticlesTitles converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticlesTitles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesTitlesParams
	// ------------- Required query parameter "input" -------------

	err = runtime.BindQueryParameter("form", true, true, "input", ctx.QueryParams(), &params.Input)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter input: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetArticlesTitles(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/articles/IsTitleInArticle", wrapper.GetArticlesIsTitleInArticle)
	router.GET(baseURL+"/articles/random", wrapper.GetArticlesRandom)
	router.GET(baseURL+"/articles/titles", wrapper.GetArticlesTitles)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/bOBD9K8TsHrWS17npFmSDwMCiLdIAPQQ+MNJYZiKRzHAU1wj03wtS9Eck23GR",
	"Q3oKLQ7nvZn3OMwrFKaxRqNmB/kruGKJjQzLayJDfmHJWCRWGD4XpkT/d2GokQw5KM0XU0iA1xb7n1gh",
	"QZdAg87JKkTHTcekdAVdlwDhc6sIS8jv+5y7+Pk2mXl4xIJ9rhvkO8U1ult01miHY2Yc9v1KMTZh8Tfh",
	"AnL4K9tVmcUSsx/qSX2TFX7dYkRQSSTXI44x+7xL4Fbq0jSXxKo4SUjGiDeUBp14B3WbwuMOGI/wSnQF",
	"KcvK6INIqtz7vKfTE64PM/Mlv6+eKmET2+eadz5E6YUZsYL/9n4lUKsCY+u0bDzGpZXFEsU0nUACLdWQ",
	"w5LZujzLVqtVKsN2aqjK4lmX/T+7uv7y/fqfaTpJl9zUe9RDy0y5dg7XkMALkutp/JtO0okPNBa1tApy",
	"uAifErCSl6Gd2ab52cwF78101NzvVsjj6q6WWDw5oRYiEBDKCaVFzAMBjaSPnZWQe09vTDRC8DxINshI",
	"DvL7IdBqiYSCjSg84gAQfPMhh+cWyZcdW+tMSwXeRaF2CjK1mMSb/+ZmR72Tsf5DOhsiR5BZUhXv7weR",
	"5/54f9+CRtPJpB9KmlEHQaS1tSpCk7NH19+EHcIwX5cMKvGd3LGNAu53LpxYyLbm3wI+NYn6SXuATKvx",
	"p8WCsRS4iemSPWNSmERH7XiDLPoQsR0kJ0zYz7X3rKfb5gFJmMUwtbcjIbd0zIC1ahTDQcFbpfnAG/Jh",
	"vc96CY7M8/FsHgn0tgOC9o7+OSbZvYtHTRJDTnjjbhNx3liqtknFgoKnDhlCadvyJ0+Esxwy/u/jDHPE",
	"+glr6cVhI/p6P90cXQIO6WUj4eCV3b2YqVvJqkJKlcleptDNu18BAAD//9yS/ZEvCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
